/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.winterchat.views;

import com.winterchat.entities.ClientSession;
import com.winterchat.entities.CommonMessage;
import com.winterchat.entities.GoodbyeClient;
import com.winterchat.entities.HelloClient;
import com.winterchat.entities.PrivateMessage;
import com.winterchat.entities.WinterTransporter;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DongHo
 */
public class LoginUI extends javax.swing.JFrame {

     /**
      * Creates new form Login
      */
     public LoginUI() {
	  initComponents();
	  setLocationRelativeTo(null);
     }

     /**
      * This method is called from within the constructor to initialize the
      * form. WARNING: Do NOT modify this code. The content of this method is
      * always regenerated by the Form Editor.
      */
     @SuppressWarnings("unchecked")
     // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
     private void initComponents() {

          jLabel1 = new javax.swing.JLabel();
          txtHostName = new javax.swing.JTextField();
          jLabel2 = new javax.swing.JLabel();
          txtNickName = new javax.swing.JTextField();
          jButton1 = new javax.swing.JButton();
          jButton2 = new javax.swing.JButton();
          errHostName = new javax.swing.JLabel();
          errNickName = new javax.swing.JLabel();
          jLabel3 = new javax.swing.JLabel();
          txtPort = new javax.swing.JTextField();

          setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
          setTitle("Đăng nhập");

          jLabel1.setText("Host Address");

          txtHostName.setText("localhost");

          jLabel2.setText("Nick Name");

          txtNickName.addKeyListener(new java.awt.event.KeyAdapter() {
               public void keyPressed(java.awt.event.KeyEvent evt) {
                    txtNickNameKeyPressed(evt);
               }
          });

          jButton1.setText("Đăng nhập");
          jButton1.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
               }
          });

          jButton2.setText("Làm lại");
          jButton2.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
               }
          });

          errHostName.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
          errHostName.setForeground(new java.awt.Color(0, 153, 51));

          errNickName.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
          errNickName.setForeground(new java.awt.Color(255, 51, 0));

          jLabel3.setText("port");

          txtPort.setText("8888");

          javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
          getContentPane().setLayout(layout);
          layout.setHorizontalGroup(
               layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                         .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                         .addComponent(jLabel1))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                         .addComponent(errNickName)
                         .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                              .addGroup(layout.createSequentialGroup()
                                   .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                   .addGap(18, 18, 18)
                                   .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addComponent(txtNickName)
                              .addComponent(errHostName, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                   .addComponent(txtHostName)
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                   .addComponent(jLabel3)
                                   .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                   .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(48, Short.MAX_VALUE))
          );
          layout.setVerticalGroup(
               layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                         .addComponent(jLabel1)
                         .addComponent(txtHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                         .addComponent(jLabel3)
                         .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addComponent(errHostName)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                         .addComponent(jLabel2)
                         .addComponent(txtNickName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(errNickName)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                         .addComponent(jButton1)
                         .addComponent(jButton2))
                    .addContainerGap(82, Short.MAX_VALUE))
          );

          pack();
     }// </editor-fold>//GEN-END:initComponents

     private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	  // nút reset
	  resetLogin();
     }//GEN-LAST:event_jButton2ActionPerformed

     private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	  // nút Đăng nhập
	  if (validates()) {
	       connectToServer(txtHostName.getText(), Integer.valueOf(txtPort.getText()));
	  }

     }//GEN-LAST:event_jButton1ActionPerformed

     private void txtNickNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNickNameKeyPressed
	  // TODO add your handling code here:
	  if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	       if (validates()) {
		    connectToServer(txtHostName.getText(), Integer.valueOf(txtPort.getText()));
	       }
	  }

     }//GEN-LAST:event_txtNickNameKeyPressed

     /**
      *********************************************************************
      * Các hàm của Đông ở đây
      * ********************************************************************
      */
     /**
      * Validate trước khi gửi thông tin đăng nhập
      *
      * @return
      */
     private boolean validates() {
	  if (txtHostName.getText().trim().equals("") || txtPort.getText().trim().equals("")) {
	       errHostName.setForeground(new java.awt.Color(255, 0, 0));
	       errHostName.setText("Không để trống HostName và Port");
	       return false;
	  } else {
	       errHostName.setText("");
	  }
	  if (txtNickName.getText().trim().length() < 5) {
	       errNickName.setText("NickName phải lớn hơn hoặc bằng 5 ký tự!");
	       return false;
	  } else {
	       errNickName.setText("");
	  }
	  return true;
     }

     /**
      * Hàm reset Login
      */
     private void resetLogin() {
	  // nút reset
	  txtHostName.setText("localhost"); // 10.22.52.2
	  txtNickName.setText("");
	  txtPort.setText("8888");
     }

     /**
      * @param hostName
      * @param portServer
      */
     public void connectToServer(String hostName, int portServer) {

	  try {
	       Socket socket = new Socket(hostName, portServer);
	       DatagramSocket dgs = new DatagramSocket(socket.getLocalPort());

	       errHostName.setForeground(new java.awt.Color(0, 153, 51));
	       errHostName.setText("Kết nối thành công tới Server");
	       PrintStream ps = new PrintStream(socket.getOutputStream());

	       // gửi dữ liệu lên server
	       String ms = txtNickName.getText();
	       ps.println(ms);
	       // chờ server phản hồi
	       BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	       String response = br.readLine();
	       if (response != null) {
		    if (!response.equalsIgnoreCase("ok")) {
			 errNickName.setText(response);
		    } else {
			 errNickName.setText("");
			 // tạo Session Client
			 ClientSession clientSession = new ClientSession(ms, hostName, portServer, socket.getInetAddress(), socket.getLocalPort());
			 // tạo danh sách chat rỗng
			 clientSession.setListPrivateChatPerson(new HashMap());
			 // ẩn Login UI
			 this.setVisible(false);
			 // hiện ClientChatUI
			 ClientChatUI clientChatUI = new ClientChatUI(clientSession);
			 clientChatUI.setVisible(true);

			 /////////////////////////////////////////////////////////////
			 // chờ ngầm
			 Thread thread = new Thread() {
			      @Override
			      public void run() {
				   try {
					byte[] recvBuf = new byte[5000];
					DatagramPacket packet = new DatagramPacket(recvBuf, recvBuf.length);
					ByteArrayInputStream byteStream;
					ObjectInputStream is;
					WinterTransporter o;

					DefaultTableModel model = (DefaultTableModel) clientChatUI.getTblListUser().getModel();
					HelloClient helloClient;
					GoodbyeClient goodbyeClient;
					CommonMessage commonMessage;
					PrivateMessage privateMessage;

					PrivateChatUI privateChatUI;

					while (true) {
					     System.out.println("Client chờ UDP ở đây...");
					     dgs.receive(packet); // chờ nhận packet
					     byteStream = new ByteArrayInputStream(recvBuf);
					     is = new ObjectInputStream(new BufferedInputStream(byteStream));
					     o = (WinterTransporter) is.readObject();
					     is.close();
					     // xử lý WinterTransporter
					     /////////////////////////////////////////////////////////////////
					     switch (o.getTypeOfMessage()) {
						  case 1:
						       helloClient = (HelloClient) o.getMessageObject();
						       // thông báo
						       clientChatUI
							       .getTxtAreaChat()
							       .append("[" + helloClient.getNickName() + " đã tham chiến cùng anh em.]\n");
						       // cập nhật danh sách
						       model.setRowCount(0);
						       // tạo mới danh sách User
						       clientSession.setListUser(new ArrayList(Arrays.asList(helloClient.getListName())));
						       for (Object object : clientSession.getListUser()) {
							    model.addRow(new String[]{object.toString()});
						       }
						       break;
						  case 2:
						       commonMessage = (CommonMessage) o.getMessageObject();
						       String nickName2 = commonMessage.getNickName();
						       String message2 = commonMessage.getMessage();
						       // thông báo
						       clientChatUI
							       .getTxtAreaChat()
							       .append(((clientSession.getNickName().equals(nickName2)) ? "Tôi" : nickName2) + " : " + message2 + "\n");
						       break;
						  case 3:
						       privateMessage = (PrivateMessage) o.getMessageObject();
						       String from3 = privateMessage.getFrom();
						       String to3 = privateMessage.getTo();
						       String message3 = privateMessage.getMessage();

						       if (!clientSession.getNickName().equals(from3)) {
							    // thêm người gửi vào danh sách chat
							    if (!clientSession.getListPrivateChatPerson().containsKey(from3)) {
								 clientSession
									 .getListPrivateChatPerson()
									 .put(from3, new PrivateChatUI(to3, from3, clientSession));
								 // gửi tin nhắn riêng
								 privateChatUI = (PrivateChatUI) clientSession.getListPrivateChatPerson().get(from3);
								 privateChatUI.getTxtAreaPrivateChat().append(from3 + " : " + message3 + "\n");
							    } else {
								 // gửi tin nhắn riêng
								 privateChatUI = (PrivateChatUI) clientSession.getListPrivateChatPerson().get(from3);
								 if (!privateChatUI.isDisplayable()) {
								      privateChatUI.setVisible(true);
								      privateChatUI.getTxtAreaPrivateChat().append(from3 + " : " + message3 + "\n");
								 } else {
								      privateChatUI.getTxtAreaPrivateChat().append(from3 + " : " + message3 + "\n");
								 }
							    }
						       }
						       break;
						  case 4:
						       goodbyeClient = (GoodbyeClient) o.getMessageObject();
						       String nickName4 = goodbyeClient.getNickName();
						       // thông báo
						       clientChatUI.getTxtAreaChat().append("[" + nickName4 + " đã rời phòng.]\n");
						       // thông báo đến danh sách chát riêng
						       if (clientSession.getListPrivateChatPerson().containsKey(nickName4)) {
							    // thông báo người chat đã thoát
							    privateChatUI = (PrivateChatUI) clientSession.getListPrivateChatPerson().get(nickName4);
							    privateChatUI.getTxtAreaPrivateChat().append("[" + nickName4 + " đã thoát!]");
							    // loại khỏi danh sách chat
							    clientSession.getListPrivateChatPerson().remove(nickName4);
						       }
						       // cập nhật lại danh sách user
						       clientSession.getListUser().remove(nickName4);
						       model.setRowCount(0);
						       for (Object object : clientSession.getListUser()) {
							    model.addRow(new String[]{object.toString()});
						       }
						       break;
					     }
					     /////////////////////////////////////////////////////////////////
					}
				   } catch (IOException | ClassNotFoundException e) {
					System.err.println("Lỗi: " + e);
				   }
			      }

			 };
			 thread.start();
			 /////////////////////////////////////////////////////////////
		    }
	       }
	       //} catch (IOException | ClassNotFoundException ex) {
	  } catch (IOException ex) {
	       errHostName.setForeground(new java.awt.Color(255, 0, 0));
	       errHostName.setText(ex + "");
	  }
	  System.out.println("kết thúc phiên nhấn Button");
     }

     /**
      * @param args the command line arguments
      */
     public static void main(String args[]) {
	  /* Set the Nimbus look and feel */
	  //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	  /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	   */
	  try {
	       for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		    if ("Windows".equals(info.getName())) {
			 javax.swing.UIManager.setLookAndFeel(info.getClassName());
			 break;
		    }
	       }
	  } catch (ClassNotFoundException ex) {
	       java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	  } catch (InstantiationException ex) {
	       java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	  } catch (IllegalAccessException ex) {
	       java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	  } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	       java.util.logging.Logger.getLogger(LoginUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	  }
	  //</editor-fold>
	  //</editor-fold>

	  /* Create and display the form */
	  java.awt.EventQueue.invokeLater(new Runnable() {
	       public void run() {
		    new LoginUI().setVisible(true);
	       }
	  });
     }

     // Variables declaration - do not modify//GEN-BEGIN:variables
     private javax.swing.JLabel errHostName;
     private javax.swing.JLabel errNickName;
     private javax.swing.JButton jButton1;
     private javax.swing.JButton jButton2;
     private javax.swing.JLabel jLabel1;
     private javax.swing.JLabel jLabel2;
     private javax.swing.JLabel jLabel3;
     private javax.swing.JTextField txtHostName;
     private javax.swing.JTextField txtNickName;
     private javax.swing.JTextField txtPort;
     // End of variables declaration//GEN-END:variables
}
